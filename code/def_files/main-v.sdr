#extension GL_ARB_gpu_shader5: enable

in vec4 vertPosition;
in vec4 vertTexCoord;
in vec3 vertNormal;
in vec4 vertTangent;
in float vertModelID;
uniform mat4 modelViewMatrix;
uniform mat4 modelMatrix;
uniform mat4 viewMatrix;
uniform mat4 projMatrix;
uniform mat4 textureMatrix;
uniform vec4 color;
#ifdef FLAG_NORMAL_EXTRUDE
uniform float extrudeWidth;
#endif
#ifdef FLAG_ENV_MAP
uniform mat4 envMatrix;
out vec3 fragEnvReflect;
#endif
#ifdef FLAG_NORMAL_MAP
out mat3 fragTangentMatrix;
#endif
#ifdef FLAG_FOG
uniform float fogStart;
uniform float fogScale;
out float fragFogDist;
#endif
#ifdef FLAG_TRANSFORM
uniform samplerBuffer transform_tex;
uniform int buffer_matrix_offset;
#ifdef FLAG_SHADOW_MAP
out float geoNotVisible;
#else
out float fragNotVisible;
#endif
#endif
#ifdef FLAG_SHADOW_MAP
#if !defined(GL_ARB_gpu_shader5)
out float geoInstance;
#endif
uniform mat4 shadow_proj_matrix[4];
out vec3 geoNormal;
out vec4 geoTexCoord;
#else
out vec4 fragPosition;
out vec3 fragNormal;
out vec4 fragTexCoord;
#endif
#ifdef FLAG_SHADOWS
uniform mat4 shadow_mv_matrix;
uniform mat4 shadow_proj_matrix[4];
out vec4 fragShadowUV[4];
out vec4 fragShadowPos;
#endif
#ifdef FLAG_THRUSTER
uniform float thruster_scale;
#endif
#ifdef FLAG_CLIP
uniform int use_clip_plane;
uniform vec4 clip_equation;
#endif
#ifdef FLAG_TRANSFORM
#define TEXELS_PER_MATRIX 4
void getModelTransform(inout mat4 transform, out float invisible, int id, int matrix_offset)
{
	transform[0] = texelFetch(transform_tex, (matrix_offset + id) * TEXELS_PER_MATRIX);
	transform[1] = texelFetch(transform_tex, (matrix_offset + id) * TEXELS_PER_MATRIX + 1);
	transform[2] = texelFetch(transform_tex, (matrix_offset + id) * TEXELS_PER_MATRIX + 2);
	transform[3] = texelFetch(transform_tex, (matrix_offset + id) * TEXELS_PER_MATRIX + 3);
	invisible = transform[3].w;
	transform[3].w = 1.0;
}
#endif
#ifdef FLAG_SHADOWS
vec4 transformToShadowMap(int i, vec4 pos)
{
	vec4 shadow_proj;
	shadow_proj = shadow_proj_matrix[i] * pos;
	shadow_proj += 1.0;
	shadow_proj *= 0.5;
	shadow_proj.w = shadow_proj.z;
	shadow_proj.z = float(i);
	return shadow_proj;
}
#endif
void main()
{
	vec4 position;
	vec3 normal;
	vec4 texCoord;
	mat4 orient = mat4(1.0);
	mat4 scale = mat4(1.0);
 #ifdef FLAG_TRANSFORM
	float invisible;
	getModelTransform(orient, invisible, int(vertModelID), buffer_matrix_offset);
  #ifdef FLAG_SHADOW_MAP
	geoNotVisible = invisible;
  #else
	fragNotVisible = invisible;
  #endif
 #endif
	texCoord = textureMatrix * vertTexCoord;
	vec4 vertex = vertPosition;
 #ifdef FLAG_THRUSTER
	if(vertex.z < -1.5) {
		vertex.z *= thruster_scale;
	}
 #endif
 // Transform the normal into eye space and normalize the result.
	normal = normalize(mat3(modelViewMatrix) * mat3(orient) * vertNormal);
	position = modelViewMatrix * orient * vertex;
 #ifdef FLAG_SHADOW_MAP
	gl_Position = position;

 #if !defined(GL_ARB_gpu_shader5)
  #ifdef APPLE
	geoInstance = float(gl_InstanceIDARB);
  #else
	geoInstance = float(gl_InstanceID);
  #endif
 #endif

 #else
	gl_Position = projMatrix * position;
 #endif
 #ifdef FLAG_NORMAL_EXTRUDE
	gl_Position.xy += (mat3(projMatrix) * normal.xyz).xy * gl_Position.z * extrudeWidth;
 #endif
 #ifdef FLAG_SHADOWS
	fragShadowPos = shadow_mv_matrix * modelMatrix * orient * vertPosition;
	fragShadowUV[0] = transformToShadowMap(0, fragShadowPos);
	fragShadowUV[1] = transformToShadowMap(1, fragShadowPos);
	fragShadowUV[2] = transformToShadowMap(2, fragShadowPos);
	fragShadowUV[3] = transformToShadowMap(3, fragShadowPos);
 #endif
 #ifdef FLAG_NORMAL_MAP
 // Setup stuff for normal maps
	vec3 t = normalize(mat3(modelViewMatrix) * mat3(orient) * vertTangent.xyz);
	vec3 b = cross(normal, t) * vertTangent.w;
	fragTangentMatrix = mat3(t, b, normal);
 #endif
 #ifdef FLAG_ENV_MAP
 // Environment mapping reflection vector.
	fragEnvReflect = reflect(normalize(position.xyz), normal);
	fragEnvReflect = vec3(envMatrix * vec4(fragEnvReflect, 0.0));
 #endif
 #ifdef FLAG_FOG
	fragFogDist = clamp((gl_Position.z - fogStart) * 0.75 * fogScale, 0.0, 1.0);
 #endif
 #ifdef FLAG_CLIP
	if(use_clip_plane == 1) {
		gl_ClipDistance[0] = dot(clip_equation, modelMatrix * orient * vertex);
	} else {
		gl_ClipDistance[0] = -1.0f;
	}
 #endif
 #ifndef FLAG_SHADOW_MAP
	fragPosition = position;
	fragNormal = normal;
	fragTexCoord = texCoord;
 #else
	geoNormal = normal;
	geoTexCoord = texCoord;
 #endif
}
